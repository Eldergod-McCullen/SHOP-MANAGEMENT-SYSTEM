/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package PROJECT_FORMS;

import java.sql.Connection;
import java.sql.*;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.util.Date;
import java.text.ParseException;

/**
 *
 * @author ELDERGOD McCULLEN
 */
public class SALES_MANAGEMENT extends javax.swing.JFrame {

    /**
     * Creates new form SALES_MANAGEMENT
     */
    public SALES_MANAGEMENT() {
        initComponents();
        connect();                                          // INITIALLY CALL THESE FUNCTIONS FIRST,LOADING THEM TO THEIR RESPECTIVE TABLES FOR REFERENCE
        customer_update();
        product_update();
        ProductComboBox_Update();
        CustomerComboBox_Update();
        setTitle("SHOP MANAGEMENT - SALES MANAGEMENT");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    Connection con;
    PreparedStatement pst;
    ResultSet Rs;
    
    //===================================== CONNECTION STRING ====================================================================================================================================
    public void connect(){
        try {                                    
            Class.forName("com.mysql.cj.jdbc.Driver");
            con=DriverManager.getConnection("jdbc:mysql://localhost:3306/shop_management","CIAN McCULLEN","BARON23790draxum100%");   
            
            System.out.println("CONNECTION SUCCESSFULL");                       //CODE FOR CONNECTING TO THE DATABASE
        } catch (ClassNotFoundException | SQLException ex) {
             JOptionPane.showMessageDialog(this, "YOU ARE NOT CONNECTED TO THE DATABASE","SHOP MANAGEMENT", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(PRODUCT_MANAGEMENT.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    //===================================== CONNECTION STRING =============================================================================================================================================
 
    
    //===================================== UPDATE DATABASE FUNCTION ==============================================================================================================================================
    private void table_update(){          // THIS FUNCTION IS FOR UPDATING THE DATABASE-SPECIFICALLY THE SALES TABLE AFTER ANY OPERATION HAS BEEN DONE ON IT
       int CC;
        try {
        pst = con.prepareStatement("SELECT * FROM `shop_management`.`sales`");
        ResultSet Rs = pst.executeQuery();
        ResultSetMetaData RSMD = Rs.getMetaData();
        CC = RSMD.getColumnCount();
        DefaultTableModel DFT = (DefaultTableModel) SalesTable.getModel();         //THIS METHOD WILL ALWAYS BE EXECUTED WHENEVER AN ACTION IS DONE ON THE DATABASE
        DFT.setRowCount(0);
        
        while (Rs.next()) {
            Vector v2 = new Vector();
            
            //LOOP THROUGH EACH COLUMN AND ADD THE CORRESSPONDING DATA TO THE VECTOR
            for (int li = 1; li <= CC; li++) {
                v2.add(Rs.getString(li)); //RETRIEVING DATA USING THE COLUMN INDEX,NOT THE COLUMN NAMES
            }
            DFT.addRow(v2);
        }  
        } catch (SQLException e) {
        e.printStackTrace();
        }
    }
    //=====================================UPDATE DATABASE FUNCTION====================================================================================================================================
    
    
    //===================================== UPDATE DATABASE FUNCTION - CUSTOMERS TABLE ====================================================================================================================
    private void customer_update(){          // THIS FUNCTION IS FOR UPDATING THE DATABASE AFTER ANY OPERATION HAS BEEN DONE ON IT
       int CC;
        try {
        pst = con.prepareStatement("SELECT * FROM `shop_management`.`customers`");
        ResultSet Rs = pst.executeQuery();
        ResultSetMetaData RSMD = Rs.getMetaData();
        CC = RSMD.getColumnCount();
        DefaultTableModel DFT = (DefaultTableModel) CustomersTable.getModel();         //THIS METHOD WILL ALWAYS BE EXECUTED WHENEVER AN ACTION IS DONE ON THE DATABASE
        DFT.setRowCount(0);
        
        while (Rs.next()) {
            Vector v2 = new Vector();
            
            //LOOP THROUGH EACH COLUMN AND ADD THE CORRESSPONDING DATA TO THE VECTOR
            for (int li = 1; li <= CC; li++) {
                v2.add(Rs.getString(li)); //RETRIEVING DATA USING THE COLUMN INDEX,NOT THE COLUMN NAMES
            }
            DFT.addRow(v2);
        }  
        } catch (SQLException e) {
        e.printStackTrace();
        }
    }
    //===================================== UPDATE DATABASE FUNCTION - CUSTOMERS TABLE =============================================================================================================================
    
    //===================================== UPDATE DATABASE FUNCTION - PRODUCTS TABLE ====================================================================================================================
    private void product_update(){          // THIS FUNCTION IS FOR UPDATING THE DATABASE AFTER ANY OPERATION HAS BEEN DONE ON IT
       int CC;
        try {
        pst = con.prepareStatement("SELECT * FROM `shop_management`.`products`");
        ResultSet Rs = pst.executeQuery();
        ResultSetMetaData RSMD = Rs.getMetaData();
        CC = RSMD.getColumnCount();
        DefaultTableModel DFT = (DefaultTableModel) ProductsTable.getModel();         //THIS METHOD WILL ALWAYS BE EXECUTED WHENEVER AN ACTION IS DONE ON THE DATABASE
        DFT.setRowCount(0);
        
        while (Rs.next()) {
            Vector v2 = new Vector();
            
            //LOOP THROUGH EACH COLUMN AND ADD THE CORRESSPONDING DATA TO THE VECTOR
            for (int li = 1; li <= CC; li++) {
                v2.add(Rs.getString(li)); //RETRIEVING DATA USING THE COLUMN INDEX,NOT THE COLUMN NAMES
            }
            DFT.addRow(v2);
        }  
        } catch (SQLException e) {
        e.printStackTrace();
        }
    }
    //=====================================UPDATE DATABASE FUNCTION - PRODUCTS TABLE =============================================================================================================================
    
    //===================================== UPDATING THE COMBOBOX CONTAINING THE PRODUCT IDs =============================================================================================================================
    private void ProductComboBox_Update()
    {
        try{
            pst = con.prepareStatement("SELECT * FROM `shop_management`.`products`");
            Rs = pst.executeQuery();
            
            while (Rs.next())
            {
                ProductComboBox.addItem(Rs.getString("PRODUCT ID"));
            }    
        } catch (SQLException e) {
        e.printStackTrace();
        }
    }
    //===================================== UPDATING THE COMBOBOX CONTAINING THE PRODUCT IDs =============================================================================================================================
  
    //===================================== UPDATING THE COMBOBOX CONTAINING THE CUSTOMER IDs =============================================================================================================================
    private void CustomerComboBox_Update()
    {
        try{
            pst = con.prepareStatement("SELECT * FROM `shop_management`.`customers`");
            Rs = pst.executeQuery();
            
            while (Rs.next())
            {
                CustomerComboBox.addItem(Rs.getString("CUSTOMER ID"));
            }    
        } catch (SQLException e) {
        e.printStackTrace();
        }
    }
    //===================================== UPDATING THE COMBOBOX CONTAINING THE CUSTOMER IDs =============================================================================================================================
  
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        LOAD_RECORDS = new javax.swing.JButton();
        DELETE_RECORD = new javax.swing.JButton();
        UPDATE_RECORD = new javax.swing.JButton();
        SAVE_RECORD = new javax.swing.JButton();
        NEW_RECORDS = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        SalesTable = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        CustomerComboBox = new javax.swing.JComboBox<>();
        ProductComboBox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        ProductsTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        CustomersTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Century Schoolbook", 1, 24)); // NOI18N
        jLabel3.setText("CUSTOMER ID");

        jTextField4.setFont(new java.awt.Font("Century Schoolbook", 0, 20)); // NOI18N
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Century Schoolbook", 1, 24)); // NOI18N
        jLabel5.setText("PRODUCT ID");

        jLabel4.setFont(new java.awt.Font("Century Schoolbook", 1, 24)); // NOI18N
        jLabel4.setText("QUANTITY");

        jLabel2.setFont(new java.awt.Font("Century Schoolbook", 1, 24)); // NOI18N
        jLabel2.setText("SALE ID");

        LOAD_RECORDS.setBackground(new java.awt.Color(0, 102, 102));
        LOAD_RECORDS.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        LOAD_RECORDS.setText("LOAD SALE RECORDS");
        LOAD_RECORDS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LOAD_RECORDSActionPerformed(evt);
            }
        });

        DELETE_RECORD.setBackground(new java.awt.Color(0, 102, 102));
        DELETE_RECORD.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        DELETE_RECORD.setText("DELETE SALE DETAILS");
        DELETE_RECORD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DELETE_RECORDActionPerformed(evt);
            }
        });

        UPDATE_RECORD.setBackground(new java.awt.Color(0, 102, 102));
        UPDATE_RECORD.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        UPDATE_RECORD.setText("UPDATE SALE DETAILS");
        UPDATE_RECORD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UPDATE_RECORDActionPerformed(evt);
            }
        });

        SAVE_RECORD.setBackground(new java.awt.Color(0, 102, 102));
        SAVE_RECORD.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        SAVE_RECORD.setText("SAVE SALE DETAILS");
        SAVE_RECORD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SAVE_RECORDActionPerformed(evt);
            }
        });

        NEW_RECORDS.setBackground(new java.awt.Color(0, 102, 102));
        NEW_RECORDS.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        NEW_RECORDS.setText("NEW RECORD");
        NEW_RECORDS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NEW_RECORDSActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 42)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SALES MANAGEMENT");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        SalesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "SALE ID", "CUSTOMER ID", "PRODUCT ID", "QUANTITY", "TOTAL PRICE", "SALE DATE"
            }
        ));
        SalesTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        SalesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SalesTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(SalesTable);

        jTextField1.setFont(new java.awt.Font("Century Schoolbook", 0, 20)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Century Schoolbook", 1, 24)); // NOI18N
        jLabel6.setText("TOTAL PRICE");

        jTextField5.setFont(new java.awt.Font("Century Schoolbook", 0, 20)); // NOI18N
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Century Schoolbook", 1, 24)); // NOI18N
        jLabel7.setText("DATE OF SALE");

        CustomerComboBox.setFont(new java.awt.Font("Century Schoolbook", 0, 12)); // NOI18N
        CustomerComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CUSTOMERS" }));
        CustomerComboBox.setOpaque(true);
        CustomerComboBox.setPreferredSize(new java.awt.Dimension(64, 31));
        CustomerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerComboBoxActionPerformed(evt);
            }
        });

        ProductComboBox.setFont(new java.awt.Font("Century Schoolbook", 0, 12)); // NOI18N
        ProductComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PRODUCTS" }));
        ProductComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductComboBoxActionPerformed(evt);
            }
        });

        ProductsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "NAME", "CATEGORY", "PRICE", "STOCK"
            }
        ));
        ProductsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        ProductsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProductsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(ProductsTable);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("CUSTOMERS");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        CustomersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "CUSTOMER ID", "NAME", "E-MAIL ADDRESS", "PHONE NUMBER"
            }
        ));
        CustomersTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        CustomersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CustomersTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(CustomersTable);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(102, 102, 102));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("PRODUCTS");
        jLabel9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1195, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField4)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(55, 55, 55)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(CustomerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(32, 32, 32)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                                            .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(ProductComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(490, 490, 490)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(NEW_RECORDS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(UPDATE_RECORD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DELETE_RECORD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SAVE_RECORD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LOAD_RECORDS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 6, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 678, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(LOAD_RECORDS, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NEW_RECORDS, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SAVE_RECORD, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UPDATE_RECORD, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DELETE_RECORD, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(CustomerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ProductComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    
    //==================================== CODE FOR LOADING THE RECORDS ONTO THE TABLE FRESHLY=====================================================================================================
    private void LOAD_RECORDSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LOAD_RECORDSActionPerformed
        table_update();
    }//GEN-LAST:event_LOAD_RECORDSActionPerformed
    //==================================== CODE FOR LOADING THE RECORDS ONTO THE TABLE FRESHLY ================================================================================================
  
    
    //=============================================== CODE FOR DELETING A RECORD ==============================================================================================================
    private void DELETE_RECORDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DELETE_RECORDActionPerformed
        try {
            String sid = jTextField1.getText();   //ASSUMING YOU ONLY NEED THE SALE ID FOR DELETION,DECLARING IT AND GIVING IT A VALUE

            pst = con.prepareStatement("DELETE FROM `shop_management`.`sales` WHERE `SALE ID`=?");

            pst.setString(1, sid);    //SET THE SALE ID AS THE REFERENCE FOR DELETION

            pst.executeUpdate();

            JOptionPane.showMessageDialog(this, "THE SALE'S DETAILS HAVE BEEN DELETED SUCCESSFULLY","SHOP MANAGEMENT", JOptionPane.INFORMATION_MESSAGE);
            table_update();

            jTextField1.setText("");
            CustomerComboBox.setSelectedItem("");           // CLEARING THE TEXTFIELDS AND COMBOBOXES AFTER DELETING A RECORD
            ProductComboBox.setSelectedItem("");
            jTextField4.setText("");
            jTextField5.setText("");
            

            jTextField1.requestFocus();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "THE SALE'S DETAILS HAVE NOT BEEN DELETED!","SHOP MANAGEMENT", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(PRODUCT_MANAGEMENT.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DELETE_RECORDActionPerformed
    //======================================= CODE FOR DELETING A RECORD =========================================================================================================================
  
    //==================================== CODE FOR UPDATING A RECORD ===========================================================================================================================================
    private void UPDATE_RECORDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UPDATE_RECORDActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel) SalesTable.getModel();
            int selectedIndex = SalesTable.getSelectedRow();

            String sid,cid,pid,quantity,price;
            Date selectedDate;
            
            sid = jTextField1.getText();
            cid = (String) CustomerComboBox.getSelectedItem();
            pid = (String) ProductComboBox.getSelectedItem();
            quantity = jTextField4.getText();
            price = jTextField5.getText();
            selectedDate = jDateChooser1.getDate();   
          
            pst = con.prepareStatement("UPDATE `shop_management`.`sales` SET `CUSTOMER ID`=?, `PRODUCT ID`=?, `QUANTITY`=?, `TOTAL PRICE`=?, `SALE DATE`=?  WHERE `SALE ID`=?");

            
            pst.setString(1, cid);
            pst.setString(2, pid);
            pst.setString(3, quantity);
            pst.setString(4, price);
            
            if (selectedDate != null) 
            {
                java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime()); // CONVERSION TO SQL DATE

                // SET THE DATE TO A PREPAREDSTATEMENT
                pst.setDate(5, sqlDate);
            } 
            else {
                pst.setDate(5, null); // MAKE IT NULL IF NO DATE IS SELECTED
            }
            
            pst.setString(6, sid);          // EMPHASIS SINCE THE SALE ID IS THE PRIMARY KEY-MAIN IDENTIFIER FOR ANY SALE

            pst.executeUpdate();

            JOptionPane.showMessageDialog(this, "THE SALE'S DETAILS HAVE BEEN UPDATED SUCCESSFULLY","SHOP MANAGEMENT", JOptionPane.INFORMATION_MESSAGE);
            table_update();

            jTextField1.requestFocus();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "THE SALE'S DETAILS HAVE NOT BEEN UPDATED!","SHOP MANAGEMENT", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(PRODUCT_MANAGEMENT.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_UPDATE_RECORDActionPerformed
    //================================================= CODE FOR UPDATING A RECORD ==================================================================================================================================
  
    
    //==============================================CODE FOR SAVING A NEW RECORD==========================================================================================================================
    private void SAVE_RECORDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SAVE_RECORDActionPerformed
        try {
            String sid, cid, pid, quantity, price;
            Date selectedDate;

            sid = jTextField1.getText();
            cid = (String) CustomerComboBox.getSelectedItem();
            pid = (String) ProductComboBox.getSelectedItem();
            quantity = jTextField4.getText();
            price = jTextField5.getText();
            selectedDate = jDateChooser1.getDate();
            

            pst = con.prepareStatement("INSERT INTO `shop_management`.`sales`(`SALE ID`, `CUSTOMER ID`, `PRODUCT ID`, `QUANTITY`, `TOTAL PRICE`, `SALE DATE`) VALUES (?, ?, ?, ?, ?, ?)");

            pst.setString(1, sid);
            pst.setString(2, cid);
            pst.setString(3, pid);
            pst.setString(4, quantity);
            pst.setString(5, price);
            
            if (selectedDate != null) 
            {
                java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime()); // CONVERT TO SQL DATE

                // SET THE DATE WITHIN THE PREPAREDSTATEMENT
                pst.setDate(6, sqlDate);
            } 
            else {
                pst.setDate(6, null); // SET NULL IF NO DATE IS SELECTED
            }
            
            pst.executeUpdate();

            JOptionPane.showMessageDialog(this, "SALE DETAILS SAVED SUCCESSFULLY","SHOP MANAGEMENT", JOptionPane.INFORMATION_MESSAGE);

            jTextField1.setText("");
            CustomerComboBox.getSelectedItem();       // CLEARING THE TEXTFIELDS,COMBOBOXES AND DATECHOOSER AFTER INSERTING A RECORD
            ProductComboBox.getSelectedItem();
            jTextField4.setText("");
            jTextField5.setText("");
            jDateChooser1.setDate(null);

            table_update();
            jTextField1.requestFocus();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "SALE DETAILS NOT SAVED!","SHOP MANAGEMENT", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(PRODUCT_MANAGEMENT.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SAVE_RECORDActionPerformed
   //============================================= CODE FOR SAVING A NEW RECORD ==========================================================================================================================
  
    //==================================== CODE FOR CREATING A NEW RECORD =======================================================================================================================
    private void NEW_RECORDSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NEW_RECORDSActionPerformed
        jTextField1.setText("");
        CustomerComboBox.setSelectedItem("");           // BASICALLY CLEARING THE TEXTFIELDS,COMBOBOXES AND DATECHOOSER TO INSERT A NEW RECORD
        ProductComboBox.setSelectedItem("");
        jTextField4.setText("");
        jTextField5.setText("");
        jDateChooser1.setDate(null);
    }//GEN-LAST:event_NEW_RECORDSActionPerformed
   //==================================== CODE FOR CREATING A NEW RECORD =====================================================================================================================
  
    
    //==================== CODE FOR PASSING DATA FROM THE TABLE ONTO THE TEXTBOXES =======================================================================================================================
    private void SalesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SalesTableMouseClicked
        DefaultTableModel  model=(DefaultTableModel) SalesTable.getModel();
        int selectedIndex=SalesTable.getSelectedRow();

        jTextField1.setText(model.getValueAt(selectedIndex, 0).toString());
        CustomerComboBox.setSelectedItem(model.getValueAt(selectedIndex, 1).toString());
        ProductComboBox.setSelectedItem(model.getValueAt(selectedIndex, 2).toString());
        jTextField4.setText(model.getValueAt(selectedIndex, 3).toString());
        jTextField5.setText(model.getValueAt(selectedIndex, 4).toString());
       
        try {
        String dateString = model.getValueAt(selectedIndex, 5).toString(); // GET THE DATE VALUE AS A STRING
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); // ADJUST THE DATE AND TIME FORMAT
        Date date = sdf.parse(dateString); // CONVERT IT TO THE DATE FORMAT
        jDateChooser1.setDate(date); // SET THE DATE WITHIN THE DATECHOOSER
        } catch (ParseException e) {
            e.printStackTrace(); // HANDLE THE PARSING ERRORS
        }
    }//GEN-LAST:event_SalesTableMouseClicked
    //==================== CODE FOR PASSING DATA FROM THE TABLE ONTO THE TEXTBOXES ===================================================================================================================
  
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void CustomerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CustomerComboBoxActionPerformed

    private void ProductComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductComboBoxActionPerformed

    private void ProductsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductsTableMouseClicked
       
    }//GEN-LAST:event_ProductsTableMouseClicked

    private void CustomersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CustomersTableMouseClicked
    
    }//GEN-LAST:event_CustomersTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SALES_MANAGEMENT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SALES_MANAGEMENT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SALES_MANAGEMENT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SALES_MANAGEMENT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SALES_MANAGEMENT().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CustomerComboBox;
    private javax.swing.JTable CustomersTable;
    private javax.swing.JButton DELETE_RECORD;
    private javax.swing.JButton LOAD_RECORDS;
    private javax.swing.JButton NEW_RECORDS;
    private javax.swing.JComboBox<String> ProductComboBox;
    private javax.swing.JTable ProductsTable;
    private javax.swing.JButton SAVE_RECORD;
    private javax.swing.JTable SalesTable;
    private javax.swing.JButton UPDATE_RECORD;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}
